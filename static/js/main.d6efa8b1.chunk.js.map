{"version":3,"sources":["components/Searchbar.js","components/ImageGalleryItem.js","components/ImageGallery.js","components/Loader.js","components/Button.js","components/Modal.js","services/imageApi.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","state","inputValue","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","autoComplete","onChange","autoFocus","placeholder","Component","ImageGalleryItem","webformatURL","tags","modal","onClick","src","alt","ImageGallery","largeImageURL","getURL","onItemClick","gallery","toggleModal","map","image","key","id","React","Loader","color","height","width","Button","Modal","handleKeydown","code","closeModal","window","addEventListener","removeEventListener","searchQuery","page","axios","get","then","response","data","hits","App","loading","error","isModalOpen","fetchImages","imageApi","prevState","catch","finally","handleSearchFormSubmit","query","prevProps","length","scrollTo","top","document","documentElement","scrollHeight","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d6efa8b1.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\n\nexport default class Searchbar extends Component {\n\n    state = {\n        inputValue:''\n    }\n\n    handleChange = e => {\n        this.setState({inputValue: e.target.value})\n        // console.log('inputValue: ', this.state.inputValue)\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        this.props.onSubmit(this.state.inputValue)\n        this.setState({inputValue:''})\n    }\n\n\n\n    render(){\n\n    return(\n        <header className=\"Searchbar\">\n          <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n              <span className=\"SearchForm-button-label\">Search</span>\n            </button>\n        \n            <input\n              className=\"SearchForm-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              onChange={this.handleChange}\n              autoFocus\n              placeholder=\"Search images and photos\"\n            />\n          </form>\n        </header>)\n}\n}\n\n","import React from 'react'\n\nconst ImageGalleryItem = ({webformatURL,tags, modal}) =>{\n    \n        return(\n        <li className=\"ImageGalleryItem\" onClick={modal}>\n            <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\n        </li>)\n    \n}\n\nexport default ImageGalleryItem;\n\n// class ImageGalleryItem extends React.Component{\n//     state ={\n//         largeImageURL:''\n//     }\n\n//     handleClick = e =>{\n//         this.setState({largeImageURL: this.props.largeImageURL })\n//         console.log('largeImageURL',this.props.largeImageURL)\n//     }\n\n//     render(){\n//         const {webformatURL,tags} = this.props\n//         return(\n//         <li className=\"ImageGalleryItem\" onClick={this.handleClick}>\n//             <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\n//         </li>)\n//     }\n// }\n\n\n// export default ImageGalleryItem;","import React from 'react'\nimport ImageGalleryItem from \"./ImageGalleryItem\";\n\n// const ImageGallery = ({gallery}) =>{\n   \n//     return(\n//            <ul className=\"ImageGallery\" >\n//           {\n//             gallery.map(({id,webformatURL,tags,largeImageURL})=> <ImageGalleryItem key={id}  webformatURL={webformatURL} tags={tags} largeImageURL={largeImageURL} />)\n//           }\n//           </ul> \n//     )\n// }\n\n// export default ImageGallery;\n\n\nexport default class ImageGallery extends React.Component{\n\n  state={\n    largeImageURL:''\n  }\n\n  getURL = largeImageURL => {\n   this.setState({largeImageURL: largeImageURL})\n   this.props.onItemClick(this.state.largeImageURL)\n   \n  //  this.setState({largeImageURL:''})\n  }\n\n  render(){\n    const {gallery,toggleModal} = this.props\n    \n    return(\n      <ul className=\"ImageGallery\" >\n     {\n       gallery.map( (image) => <ImageGalleryItem key={image.id}  webformatURL={image.webformatURL} tags={image.tags} modal={()=>toggleModal(image.largeImageURL)} />)\n     }\n     </ul> \n)\n  }\n}","import React from 'react'\n\nimport Spinner from 'react-loader-spinner'\nexport default class Loader extends React.Component {\n //other logic\n   render() {\n    return(\n     <Spinner\n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n     />\n    );\n   }\n}","import React from 'react'\n\nconst Button = ({onClick}) =>{\n    return (\n        <button type='button' className='Button' onClick={onClick}>Load more</button>\n    )\n}\n\nexport default Button","\nimport React, {Component} from 'react'\n\nexport default class Modal extends Component {\n\n    componentDidMount(){\n        // console.log('componentDidMount')\n        // console.log('addEventListener')\n        window.addEventListener('keydown', this.handleKeydown)\n        \n    }\n\n    componentWillUnmount(){\n        // console.log('componentWillUnmount')\n        // console.log('removeEventListener')\n        window.removeEventListener('keydown' , this.handleKeydown)\n    }\n\n    handleKeydown = e => {\n        if (e.code === 'Escape'){\n            this.props.closeModal()\n        }\n    }\n    \n    render(){\n\n        const {largeImageURL, closeModal} = this.props\n\n        return(\n            <div className=\"Overlay\" onClick={closeModal}>\n                <div className=\"Modal\">\n                    <img src={largeImageURL} alt='' />\n                </div>\n            </div>\n            )\n    }\n    \n}\n\n ","import axios from 'axios'\n\nconst API_KEY = '16700707-990f3fa09f9144fb3f849d977'\n\nconst fetchImageWithQuery = (searchQuery , page ) => {\n\n    return axios\n    .get(`https://pixabay.com/api/?q=${searchQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`)\n    .then(response => response.data.hits)\n}\n\nexport default{\n    fetchImageWithQuery,\n}","import React, {Component} from 'react';\n\nimport Searchbar from \"./components/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery\";\n\nimport Loader from \"./components/Loader\";\nimport Button from \"./components/Button\";\nimport Modal from \"./components/Modal\";\n\n\nimport imageApi from './services/imageApi'\n\nimport './App.css';\n\nclass App extends Component{\n\n  state={\n    gallery:[],\n    loading:false,\n    error: null,\n    searchQuery:'',\n    page:1,\n    largeImageURL:'',\n    isModalOpen: false\n  }\n\n\n  componentDidUpdate(prevProps,prevState){\n    const prevQuery = prevState.searchQuery\n    const nextQuery = this.state.searchQuery\n    // если предыдущая и следующая строка поиска не равны - делаем новый запрос\n    if(prevQuery !== nextQuery){\n      this.fetchImages()\n    }\n\n    const prevArray = prevState.gallery.length\n    const nextArray = this.state.gallery.length\n    //если после нажатия load more длина нового массива стала больше - ltkftv scrollTo\n    if (prevArray !== nextArray){\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n\n    \n  }\n\n \n\n  fetchImages = () =>{\n    const {searchQuery,page} = this.state\n    this.setState({loading:true})\n    \n    imageApi.fetchImageWithQuery(searchQuery,page)\n    .then(gallery => \n      this.setState(prevState => ({\n        gallery:[...prevState.gallery, ...gallery], \n        page: prevState.page+1})))\n    .catch((error)=> this.setState({error}))\n    .finally(()=> this.setState({loading:false}))\n  }\n\n  //получаем новую строку из SearchForm, записываем ее в state, очищаем gallery и \n  //сбрасываем  page после предыдещего запроса\n  handleSearchFormSubmit = query =>{\n    this.setState({ \n      searchQuery: query, \n      page: 1,\n      gallery:[]\n    })\n  }\n  //определяем открытие/закрытие модального и записываем адрес изображения для него в стейт\n  toggleModal = (largeImageURL) =>{\n    this.setState({\n      largeImageURL: largeImageURL,\n      isModalOpen:!this.state.isModalOpen\n    })\n  }\n\n\n  render(){\n    const {gallery,loading, largeImageURL, isModalOpen} = this.state;\n    return(\n      <div className='App'>\n          <Searchbar onSubmit={this.handleSearchFormSubmit}/>\n          {gallery.length > 0 && <ImageGallery gallery={gallery} toggleModal={this.toggleModal}/>}\n          {loading && <Loader/>}\n          {gallery.length > 0 && !loading && <Button onClick={this.fetchImages}/>}\n          {isModalOpen && <Modal largeImageURL={largeImageURL} closeModal={this.toggleModal}/>}\n\n\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}